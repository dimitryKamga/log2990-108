{"version":3,"file":"C:/Users/USER/Documents/GitHub/log2990-108/server/app/controllers/database.controller.ts","sources":["C:/Users/USER/Documents/GitHub/log2990-108/server/app/controllers/database.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { STORAGE_DIR } from '@app/constants';\nimport { HttpStatus } from '@app/http-status';\nimport { DatabaseService } from '@app/services/database.service';\nimport { TYPES } from '@app/types';\nimport { MetaData } from '@common/communication/metadata';\nimport { Request, Response, Router } from 'express';\nimport * as fs from 'fs';\nimport { inject, injectable } from 'inversify';\nimport * as multer from 'multer';\nimport * as path from 'path';\n\n@injectable()\nexport class DatabaseController {\n    router: Router;\n    upload: multer.Multer;\n\n    constructor(@inject(TYPES.DatabaseService) private databaseService: DatabaseService) {\n        this.upload = this.databaseService.getMulterInstance(STORAGE_DIR);\n        this.configureRouter();\n        this.databaseService.start();\n    }\n\n    private configureRouter(): void {\n        this.router = Router();\n\n        this.router.get('/metaDatas', (req: Request, res: Response) => {\n            this.databaseService\n                .getMetaData()\n                .then((metaData: MetaData[]) => {\n                    res.json(metaData).status(HttpStatus.OK);\n                })\n                .catch((error: Error) => {\n                    res.status(HttpStatus.NOT_FOUND).send(error.message);\n                });\n        });\n\n        this.router.post('/postDrawing', this.upload.single('image'), (req: Request, res: Response) => {\n            req.body.filename = req.file.filename;\n            let tags: string[];\n            let metaName : string;\n            !req.body.tags ? (tags = Array(0)) : (tags = req.body.tags);\n            if (!Array.isArray(tags)) tags = [tags];\n            req.body.name ? metaName = req.body.name : metaName = 'null';\n            const meta: MetaData = { name: metaName, tags, filename: req.body.filename, ext: req.body.ext };\n            this.databaseService\n                .postDrawing(meta)\n                .then(() => {\n                    res.sendStatus(HttpStatus.NO_CONTENT);\n                })\n                .catch((error: Error) => {\n                    res.status(HttpStatus.NOT_FOUND).send(error.message);\n                });\n        });\n\n        this.router.get('/getDrawing/:filename', (req: Request, res: Response) => {\n            this.databaseService.localDrawings = fs.readdirSync(this.databaseService.getStorageDir());\n            if (this.databaseService.localDrawings.includes(req.params.filename)) {\n                res.sendFile(req.params.filename, { root: path.join(__dirname, this.databaseService.getStorageRootPath()) });\n                res.status(HttpStatus.OK).contentType('image/png');\n            } else {\n                const error = new Error('Aucun dessin trouvÃ©');\n                res.status(HttpStatus.NOT_FOUND).send(error.message);\n            }\n        });\n\n        this.router.delete('/deleteDrawing/:filename', (req: Request, res: Response) => {\n            this.databaseService\n                .deleteDrawing(req.params.filename)\n                .then(() => {\n                    res.sendStatus(HttpStatus.NO_CONTENT).status(HttpStatus.NO_CONTENT);\n                })\n                .catch((error: Error) => {\n                    res.status(HttpStatus.NOT_FOUND).send(error.message);\n                });\n        });\n    }\n}\n"]}