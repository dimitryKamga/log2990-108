"use strict";function cov_7yh6c0pv5(){var path="C:\\Users\\USER\\Documents\\GitHub\\log2990-108\\server\\app\\controllers\\database.controller.ts";var hash="2e18e5c7cb12f5cebfc994879e8dc6486ede6b2c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"C:\\Users\\USER\\Documents\\GitHub\\log2990-108\\server\\app\\controllers\\database.controller.ts",statementMap:{"0":{start:{line:2,column:17},end:{line:7,column:1}},"1":{start:{line:3,column:12},end:{line:3,column:28}},"2":{start:{line:3,column:34},end:{line:3,column:125}},"3":{start:{line:4,column:4},end:{line:5,column:150}},"4":{start:{line:4,column:79},end:{line:4,column:131}},"5":{start:{line:5,column:9},end:{line:5,column:150}},"6":{start:{line:5,column:22},end:{line:5,column:43}},"7":{start:{line:5,column:58},end:{line:5,column:150}},"8":{start:{line:5,column:81},end:{line:5,column:150}},"9":{start:{line:6,column:4},end:{line:6,column:66}},"10":{start:{line:8,column:17},end:{line:10,column:1}},"11":{start:{line:9,column:4},end:{line:9,column:109}},"12":{start:{line:9,column:79},end:{line:9,column:109}},"13":{start:{line:11,column:14},end:{line:13,column:1}},"14":{start:{line:12,column:4},end:{line:12,column:73}},"15":{start:{line:12,column:36},end:{line:12,column:71}},"16":{start:{line:14,column:0},end:{line:14,column:62}},"17":{start:{line:15,column:0},end:{line:15,column:36}},"18":{start:{line:16,column:20},end:{line:16,column:45}},"19":{start:{line:17,column:27},end:{line:17,column:68}},"20":{start:{line:18,column:16},end:{line:18,column:37}},"21":{start:{line:19,column:22},end:{line:19,column:49}},"22":{start:{line:21,column:18},end:{line:21,column:36}},"23":{start:{line:23,column:20},end:{line:23,column:40}},"24":{start:{line:25,column:25},end:{line:138,column:1}},"25":{start:{line:27,column:8},end:{line:27,column:47}},"26":{start:{line:28,column:8},end:{line:28,column:87}},"27":{start:{line:29,column:8},end:{line:29,column:31}},"28":{start:{line:30,column:8},end:{line:30,column:37}},"29":{start:{line:33,column:8},end:{line:33,column:41}},"30":{start:{line:90,column:8},end:{line:99,column:11}},"31":{start:{line:91,column:12},end:{line:98,column:15}},"32":{start:{line:94,column:16},end:{line:94,column:71}},"33":{start:{line:97,column:16},end:{line:97,column:83}},"34":{start:{line:139,column:0},end:{line:143,column:23}},"35":{start:{line:144,column:0},end:{line:144,column:48}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:2,column:46},end:{line:2,column:47}},loc:{start:{line:2,column:87},end:{line:7,column:1}},line:2},"1":{name:"(anonymous_1)",decl:{start:{line:8,column:46},end:{line:8,column:47}},loc:{start:{line:8,column:62},end:{line:10,column:1}},line:8},"2":{name:"(anonymous_2)",decl:{start:{line:11,column:40},end:{line:11,column:41}},loc:{start:{line:11,column:73},end:{line:13,column:1}},line:11},"3":{name:"(anonymous_3)",decl:{start:{line:12,column:11},end:{line:12,column:12}},loc:{start:{line:12,column:34},end:{line:12,column:73}},line:12},"4":{name:"(anonymous_4)",decl:{start:{line:26,column:4},end:{line:26,column:5}},loc:{start:{line:26,column:33},end:{line:31,column:5}},line:26},"5":{name:"(anonymous_5)",decl:{start:{line:32,column:4},end:{line:32,column:5}},loc:{start:{line:32,column:22},end:{line:137,column:5}},line:32},"6":{name:"(anonymous_6)",decl:{start:{line:90,column:38},end:{line:90,column:39}},loc:{start:{line:90,column:58},end:{line:99,column:9}},line:90},"7":{name:"(anonymous_7)",decl:{start:{line:93,column:22},end:{line:93,column:23}},loc:{start:{line:93,column:36},end:{line:95,column:13}},line:93},"8":{name:"(anonymous_8)",decl:{start:{line:96,column:23},end:{line:96,column:24}},loc:{start:{line:96,column:34},end:{line:98,column:13}},line:96}},branchMap:{"0":{loc:{start:{line:2,column:17},end:{line:7,column:1}},type:"binary-expr",locations:[{start:{line:2,column:18},end:{line:2,column:22}},{start:{line:2,column:26},end:{line:2,column:41}},{start:{line:2,column:46},end:{line:7,column:1}}],line:2},"1":{loc:{start:{line:3,column:34},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:42},end:{line:3,column:48}},{start:{line:3,column:51},end:{line:3,column:125}}],line:3},"2":{loc:{start:{line:3,column:51},end:{line:3,column:125}},type:"cond-expr",locations:[{start:{line:3,column:67},end:{line:3,column:118}},{start:{line:3,column:121},end:{line:3,column:125}}],line:3},"3":{loc:{start:{line:4,column:4},end:{line:5,column:150}},type:"if",locations:[{start:{line:4,column:4},end:{line:5,column:150}},{start:{line:4,column:4},end:{line:5,column:150}}],line:4},"4":{loc:{start:{line:4,column:8},end:{line:4,column:77}},type:"binary-expr",locations:[{start:{line:4,column:8},end:{line:4,column:35}},{start:{line:4,column:39},end:{line:4,column:77}}],line:4},"5":{loc:{start:{line:5,column:58},end:{line:5,column:150}},type:"if",locations:[{start:{line:5,column:58},end:{line:5,column:150}},{start:{line:5,column:58},end:{line:5,column:150}}],line:5},"6":{loc:{start:{line:5,column:85},end:{line:5,column:149}},type:"binary-expr",locations:[{start:{line:5,column:86},end:{line:5,column:143}},{start:{line:5,column:148},end:{line:5,column:149}}],line:5},"7":{loc:{start:{line:5,column:86},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:94},end:{line:5,column:98}},{start:{line:5,column:101},end:{line:5,column:143}}],line:5},"8":{loc:{start:{line:5,column:101},end:{line:5,column:143}},type:"cond-expr",locations:[{start:{line:5,column:109},end:{line:5,column:126}},{start:{line:5,column:129},end:{line:5,column:143}}],line:5},"9":{loc:{start:{line:6,column:11},end:{line:6,column:62}},type:"binary-expr",locations:[{start:{line:6,column:11},end:{line:6,column:16}},{start:{line:6,column:20},end:{line:6,column:21}},{start:{line:6,column:25},end:{line:6,column:62}}],line:6},"10":{loc:{start:{line:8,column:17},end:{line:10,column:1}},type:"binary-expr",locations:[{start:{line:8,column:18},end:{line:8,column:22}},{start:{line:8,column:26},end:{line:8,column:41}},{start:{line:8,column:46},end:{line:10,column:1}}],line:8},"11":{loc:{start:{line:9,column:4},end:{line:9,column:109}},type:"if",locations:[{start:{line:9,column:4},end:{line:9,column:109}},{start:{line:9,column:4},end:{line:9,column:109}}],line:9},"12":{loc:{start:{line:9,column:8},end:{line:9,column:77}},type:"binary-expr",locations:[{start:{line:9,column:8},end:{line:9,column:35}},{start:{line:9,column:39},end:{line:9,column:77}}],line:9},"13":{loc:{start:{line:11,column:14},end:{line:13,column:1}},type:"binary-expr",locations:[{start:{line:11,column:15},end:{line:11,column:19}},{start:{line:11,column:23},end:{line:11,column:35}},{start:{line:11,column:40},end:{line:13,column:1}}],line:11}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},b:{"0":[0,0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0],"10":[0,0,0],"11":[0,0],"12":[0,0],"13":[0,0,0]},inputSourceMap:{version:3,file:"C:/Users/USER/Documents/GitHub/log2990-108/server/app/controllers/database.controller.ts",sources:["C:/Users/USER/Documents/GitHub/log2990-108/server/app/controllers/database.controller.ts"],names:[],mappings:";;;;;;;;;;;;;;;AAAA,8CAA6C;AAC7C,qEAAiE;AACjE,sCAAmC;AACnC,kDAA8C;AAC9C,4DAA4D;AAC5D,qCAAkE;AAClE,2BAA2B;AAC3B,yCAA+C;AAG/C,+BAA+B;AAG/B,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;IAI3B,YAAmD,eAAgC;QAAhC,oBAAe,GAAf,eAAe,CAAiB;QAC/E,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,kBAAkB,CAAC,uBAAW,CAAC,CAAC;QACnE,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;IACjC,CAAC;IAEO,eAAe;QACnB,IAAI,CAAC,MAAM,GAAG,gBAAM,EAAE,CAAC;QAEvB;;;;;;;;;;;;;;;WAeG;QAEH;;;;;;;;;;;;;;;;;WAiBG;QACH;;;;;;;;;;;;;;;;;;;;;WAqBG;QAEH,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;YAC9E,IAAI,CAAC,eAAe;iBACf,WAAW,EAAE;iBACb,IAAI,CAAC,CAAC,QAAoB,EAAE,EAAE;gBAC3B,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,wBAAU,CAAC,EAAE,CAAC,CAAC;YAC7C,CAAC,CAAC;iBACD,KAAK,CAAC,CAAC,KAAY,EAAE,EAAE;gBACpB,GAAG,CAAC,MAAM,CAAC,wBAAU,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACzD,CAAC,CAAC,CAAC;QACX,CAAC,CAAC,CAAC;QAEX;;;;;;;;;sBASc;QAEd;;;;;;;;;;;;;;;;;;;;;;;;;;kBA0BU;IACN,CAAC;CACJ,CAAA;AAzHY,kBAAkB;IAD9B,sBAAU,EAAE;IAKI,WAAA,kBAAM,CAAC,aAAK,CAAC,eAAe,CAAC,CAAA;qCAA0B,kCAAe;GAJ1E,kBAAkB,CAyH9B;AAzHY,gDAAkB",sourcesContent:["import { STORAGE_DIR } from '@app/constants';\nimport { DatabaseService } from '@app/services/database.service';\nimport { TYPES } from '@app/types';\nimport { HttpStatus } from '@app/http-status';\n//import { MetaData } from '@common/communication/metadata';\nimport { NextFunction, Request, Response, Router } from 'express';\n//import * as fs from 'fs';\nimport { inject, injectable } from 'inversify';\nimport * as multer from 'multer';\nimport { MetaData } from '@common/communication/metadata';\n//import * as path from 'path';\n\n@injectable()\nexport class DatabaseController {\n    router: Router;\n    upload: multer.Multer;\n\n    constructor(@inject(TYPES.DatabaseService) private databaseService: DatabaseService) {\n        this.upload = this.databaseService.createMulterUpload(STORAGE_DIR);\n        this.configureRouter();\n        this.databaseService.start();\n    }\n\n    private configureRouter(): void {\n        this.router = Router();\n\n        /**\n         * @swagger\n         *\n         * definitions:\n         *   MetaData:\n         *     type: object\n         *     properties:\n         *       name:\n         *         type: string\n         *       tags:\n         *         type: string[]\n         *       filename:\n         *         type: string\n         *       ext:\n         *         type: string\n         */\n\n        /**\n         * @swagger\n         *\n         * /api/database/metaDatas:\n         *   get:\n         *     description: Get all metadatas of database\n         *     tags:\n         *       - Get MetaDatas\n         *     produces:\n         *       - application/json\n         *     responses:\n         *       200:\n         *         schema:\n         *           $ref: '#/definitions/MetaData'\n         *       404:\n         *         schema:\n         *           $ref: '#/definitions/MetaData'\n         */\n        /**\n         * @swagger\n         *\n         * /api/database/getDrawing:\n         *   get:\n         *     description: Return drawing\n         *     parameters:\n         *        - in: path\n         *          name: filename\n         *          type: string\n         *     tags:\n         *       - GetDrawing\n         *     produces:\n         *       - application/json\n         *     responses:\n         *       200:\n         *         schema:\n         *           $ref: '#/definitions/MetaData'\n         *       400:\n         *         schema:\n         *           $ref: '#/definitions/MetaData'\n         */\n\n        this.router.get('/metaDatas', (req: Request, res: Response, next: NextFunction) => {\n            this.databaseService\n                .getMetaData()\n                .then((metaData: MetaData[]) => {\n                    res.json(metaData).status(HttpStatus.OK);\n                })\n                .catch((error: Error) => {\n                    res.status(HttpStatus.NOT_FOUND).send(error.message);\n                });\n        }); \n\n/*         this.router.delete('/deleteDrawing/:filename', (req: Request, res: Response, next: NextFunction) => {\n            this.databaseService\n                .deleteDrawing(req.params.filename)\n                .then(() => {\n                    res.sendStatus(HttpStatus.NO_CONTENT).status(HttpStatus.NO_CONTENT);\n                })\n                .catch((error: Error) => {\n                    res.status(HttpStatus.NOT_FOUND).send(error.message);\n                });\n        }); */\n\n/*         this.router.post('/addDrawing', this.upload.single('image'), (req: Request, res: Response, next: NextFunction) => {\n            req.body['filename'] = req.file.filename;\n            let tags: string[];\n            !req.body['tags'] ? (tags = Array(0)) : (tags = req.body['tags']);\n            if (!Array.isArray(tags)) tags = [tags];\n            const meta: MetaData = { name: req.body['name'], tags: tags, filename: req.body['filename'], ext: req.body['ext'] };\n            this.databaseService\n                .addDrawing(meta)\n                .then(() => {\n                    res.sendStatus(HttpStatus.NO_CONTENT).status(HttpStatus.CREATED);\n                })\n                .catch((error: Error) => {\n                    res.status(HttpStatus.NOT_FOUND).send(error.message);\n                });\n        });\n\n        this.router.get('/getDrawing/:filename', (req: Request, res: Response, next: NextFunction) => {\n            const files: string[] = fs.readdirSync(STORAGE_DIR);\n            if (files.includes(req.params.filename)) {\n                res.sendFile(req.params.filename, { root: path.join(__dirname, STORAGE_PATH) });\n                res.status(HttpStatus.OK).contentType('image/png');\n            } else {\n                const error = new Error('Aucun dessin trouv\xE9');\n                res.status(HttpStatus.NOT_FOUND).send(error.message);\n            }\n        });\n        */\n    } \n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"2e18e5c7cb12f5cebfc994879e8dc6486ede6b2c"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_7yh6c0pv5=function(){return actualCoverage;};}return actualCoverage;}cov_7yh6c0pv5();var __decorate=(cov_7yh6c0pv5().s[0]++,(cov_7yh6c0pv5().b[0][0]++,this)&&(cov_7yh6c0pv5().b[0][1]++,this.__decorate)||(cov_7yh6c0pv5().b[0][2]++,function(decorators,target,key,desc){cov_7yh6c0pv5().f[0]++;var c=(cov_7yh6c0pv5().s[1]++,arguments.length),r=(cov_7yh6c0pv5().s[2]++,c<3?(cov_7yh6c0pv5().b[1][0]++,target):(cov_7yh6c0pv5().b[1][1]++,desc===null?(cov_7yh6c0pv5().b[2][0]++,desc=Object.getOwnPropertyDescriptor(target,key)):(cov_7yh6c0pv5().b[2][1]++,desc))),d;cov_7yh6c0pv5().s[3]++;if((cov_7yh6c0pv5().b[4][0]++,typeof Reflect==="object")&&(cov_7yh6c0pv5().b[4][1]++,typeof Reflect.decorate==="function")){cov_7yh6c0pv5().b[3][0]++;cov_7yh6c0pv5().s[4]++;r=Reflect.decorate(decorators,target,key,desc);}else{cov_7yh6c0pv5().b[3][1]++;cov_7yh6c0pv5().s[5]++;for(var i=(cov_7yh6c0pv5().s[6]++,decorators.length-1);i>=0;i--){cov_7yh6c0pv5().s[7]++;if(d=decorators[i]){cov_7yh6c0pv5().b[5][0]++;cov_7yh6c0pv5().s[8]++;r=(cov_7yh6c0pv5().b[6][0]++,c<3?(cov_7yh6c0pv5().b[7][0]++,d(r)):(cov_7yh6c0pv5().b[7][1]++,c>3?(cov_7yh6c0pv5().b[8][0]++,d(target,key,r)):(cov_7yh6c0pv5().b[8][1]++,d(target,key))))||(cov_7yh6c0pv5().b[6][1]++,r);}else{cov_7yh6c0pv5().b[5][1]++;}}}cov_7yh6c0pv5().s[9]++;return(cov_7yh6c0pv5().b[9][0]++,c>3)&&(cov_7yh6c0pv5().b[9][1]++,r)&&(cov_7yh6c0pv5().b[9][2]++,Object.defineProperty(target,key,r)),r;}));var __metadata=(cov_7yh6c0pv5().s[10]++,(cov_7yh6c0pv5().b[10][0]++,this)&&(cov_7yh6c0pv5().b[10][1]++,this.__metadata)||(cov_7yh6c0pv5().b[10][2]++,function(k,v){cov_7yh6c0pv5().f[1]++;cov_7yh6c0pv5().s[11]++;if((cov_7yh6c0pv5().b[12][0]++,typeof Reflect==="object")&&(cov_7yh6c0pv5().b[12][1]++,typeof Reflect.metadata==="function")){cov_7yh6c0pv5().b[11][0]++;cov_7yh6c0pv5().s[12]++;return Reflect.metadata(k,v);}else{cov_7yh6c0pv5().b[11][1]++;}}));var __param=(cov_7yh6c0pv5().s[13]++,(cov_7yh6c0pv5().b[13][0]++,this)&&(cov_7yh6c0pv5().b[13][1]++,this.__param)||(cov_7yh6c0pv5().b[13][2]++,function(paramIndex,decorator){cov_7yh6c0pv5().f[2]++;cov_7yh6c0pv5().s[14]++;return function(target,key){cov_7yh6c0pv5().f[3]++;cov_7yh6c0pv5().s[15]++;decorator(target,key,paramIndex);};}));cov_7yh6c0pv5().s[16]++;Object.defineProperty(exports,"__esModule",{value:true});cov_7yh6c0pv5().s[17]++;exports.DatabaseController=void 0;const constants_1=(cov_7yh6c0pv5().s[18]++,require("@app/constants"));const database_service_1=(cov_7yh6c0pv5().s[19]++,require("@app/services/database.service"));const types_1=(cov_7yh6c0pv5().s[20]++,require("@app/types"));const http_status_1=(cov_7yh6c0pv5().s[21]++,require("@app/http-status"));//import { MetaData } from '@common/communication/metadata';
const express_1=(cov_7yh6c0pv5().s[22]++,require("express"));//import * as fs from 'fs';
const inversify_1=(cov_7yh6c0pv5().s[23]++,require("inversify"));//import * as path from 'path';
cov_7yh6c0pv5().s[24]++;let DatabaseController=class DatabaseController{constructor(databaseService){cov_7yh6c0pv5().f[4]++;cov_7yh6c0pv5().s[25]++;this.databaseService=databaseService;cov_7yh6c0pv5().s[26]++;this.upload=this.databaseService.createMulterUpload(constants_1.STORAGE_DIR);cov_7yh6c0pv5().s[27]++;this.configureRouter();cov_7yh6c0pv5().s[28]++;this.databaseService.start();}configureRouter(){cov_7yh6c0pv5().f[5]++;cov_7yh6c0pv5().s[29]++;this.router=express_1.Router();/**
         * @swagger
         *
         * definitions:
         *   MetaData:
         *     type: object
         *     properties:
         *       name:
         *         type: string
         *       tags:
         *         type: string[]
         *       filename:
         *         type: string
         *       ext:
         *         type: string
         */ /**
         * @swagger
         *
         * /api/database/metaDatas:
         *   get:
         *     description: Get all metadatas of database
         *     tags:
         *       - Get MetaDatas
         *     produces:
         *       - application/json
         *     responses:
         *       200:
         *         schema:
         *           $ref: '#/definitions/MetaData'
         *       404:
         *         schema:
         *           $ref: '#/definitions/MetaData'
         */ /**
         * @swagger
         *
         * /api/database/getDrawing:
         *   get:
         *     description: Return drawing
         *     parameters:
         *        - in: path
         *          name: filename
         *          type: string
         *     tags:
         *       - GetDrawing
         *     produces:
         *       - application/json
         *     responses:
         *       200:
         *         schema:
         *           $ref: '#/definitions/MetaData'
         *       400:
         *         schema:
         *           $ref: '#/definitions/MetaData'
         */cov_7yh6c0pv5().s[30]++;this.router.get('/metaDatas',(req,res,next)=>{cov_7yh6c0pv5().f[6]++;cov_7yh6c0pv5().s[31]++;this.databaseService.getMetaData().then(metaData=>{cov_7yh6c0pv5().f[7]++;cov_7yh6c0pv5().s[32]++;res.json(metaData).status(http_status_1.HttpStatus.OK);}).catch(error=>{cov_7yh6c0pv5().f[8]++;cov_7yh6c0pv5().s[33]++;res.status(http_status_1.HttpStatus.NOT_FOUND).send(error.message);});});/*         this.router.delete('/deleteDrawing/:filename', (req: Request, res: Response, next: NextFunction) => {
                    this.databaseService
                        .deleteDrawing(req.params.filename)
                        .then(() => {
                            res.sendStatus(HttpStatus.NO_CONTENT).status(HttpStatus.NO_CONTENT);
                        })
                        .catch((error: Error) => {
                            res.status(HttpStatus.NOT_FOUND).send(error.message);
                        });
                }); */ /*         this.router.post('/addDrawing', this.upload.single('image'), (req: Request, res: Response, next: NextFunction) => {
                    req.body['filename'] = req.file.filename;
                    let tags: string[];
                    !req.body['tags'] ? (tags = Array(0)) : (tags = req.body['tags']);
                    if (!Array.isArray(tags)) tags = [tags];
                    const meta: MetaData = { name: req.body['name'], tags: tags, filename: req.body['filename'], ext: req.body['ext'] };
                    this.databaseService
                        .addDrawing(meta)
                        .then(() => {
                            res.sendStatus(HttpStatus.NO_CONTENT).status(HttpStatus.CREATED);
                        })
                        .catch((error: Error) => {
                            res.status(HttpStatus.NOT_FOUND).send(error.message);
                        });
                });
        
                this.router.get('/getDrawing/:filename', (req: Request, res: Response, next: NextFunction) => {
                    const files: string[] = fs.readdirSync(STORAGE_DIR);
                    if (files.includes(req.params.filename)) {
                        res.sendFile(req.params.filename, { root: path.join(__dirname, STORAGE_PATH) });
                        res.status(HttpStatus.OK).contentType('image/png');
                    } else {
                        const error = new Error('Aucun dessin trouvé');
                        res.status(HttpStatus.NOT_FOUND).send(error.message);
                    }
                });
                */}};cov_7yh6c0pv5().s[34]++;DatabaseController=__decorate([inversify_1.injectable(),__param(0,inversify_1.inject(types_1.TYPES.DatabaseService)),__metadata("design:paramtypes",[database_service_1.DatabaseService])],DatabaseController);cov_7yh6c0pv5().s[35]++;exports.DatabaseController=DatabaseController;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,