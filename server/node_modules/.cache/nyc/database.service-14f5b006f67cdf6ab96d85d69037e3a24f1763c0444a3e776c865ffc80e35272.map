{"version":3,"file":"C:/Users/USER/Documents/GitHub/log2990-108/server/app/services/database.service.ts","sources":["C:/Users/USER/Documents/GitHub/log2990-108/server/app/services/database.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { DATABASE_COLLECTION, DATABASE_NAME, DATABASE_URL, MAX_TAGS, REGEX_TAG, REGEX_TITLE, STORAGE_DIR } from '@app/constants';\nimport { MetaData } from '@common/communication/metadata';\nimport * as fs from 'fs';\nimport { injectable } from 'inversify';\nimport { Collection, MongoClient, MongoClientOptions } from 'mongodb';\nimport * as multer from 'multer';\nimport 'reflect-metadata';\n\n@injectable()\nexport class DatabaseService {\n    client: MongoClient;\n    collection: Collection<MetaData>;\n    multerObject: multer.Multer;\n    localDrawings: string[];\n\n    private options: MongoClientOptions = {\n        useNewUrlParser: true,\n        useUnifiedTopology: true,\n    };\n\n    start(url = DATABASE_URL) {\n        !fs.existsSync(STORAGE_DIR) ? fs.mkdirSync(STORAGE_DIR) : (this.localDrawings = fs.readdirSync(STORAGE_DIR));\n        MongoClient.connect(url, this.options)\n            .then((client: MongoClient) => {\n                this.client = client;\n                this.collection = client.db(DATABASE_NAME).collection(DATABASE_COLLECTION);\n            })\n            .catch((error) => {\n                throw error;\n            });\n    }\n\n    createMulterUpload(directory: string): multer.Multer {\n        this.multerObject = multer({ dest: directory });\n        return this.multerObject;\n    }\n\n    async addDrawing(metaData: MetaData): Promise<void> {\n        if (this.checkMetaData(metaData)) {\n            await this.collection.insertOne(metaData);\n        } else {\n            try {\n                fs.unlinkSync(STORAGE_DIR + metaData.filename);\n            } catch (error) {\n                throw new Error('Métadonnées non valides');\n            }\n        }\n    }\n\n    async getMetaData(): Promise<MetaData[]> {\n        this.localDrawings = fs.readdirSync(STORAGE_DIR);\n        const metadatas: MetaData[] = [];\n        return this.collection\n            .find({})\n            .toArray()\n            .then((metaDatas: MetaData[]) => {\n                for (const meta of metaDatas) {\n                    if (this.localDrawings.includes(meta.filename)) {\n                        metadatas.push(meta);\n                    }\n                }\n                return metadatas;\n            });\n    }\n\n    async deleteDrawing(newFilename: string): Promise<void> {\n        this.localDrawings = fs.readdirSync(STORAGE_DIR);\n        if (this.localDrawings.includes(newFilename)) {\n            await this.collection.findOneAndDelete({ filename: newFilename });\n            try {\n                fs.unlinkSync(STORAGE_DIR + newFilename);\n            } catch (error) {\n                throw new Error('Impossible de Supprimer');\n            }\n        } else throw new Error('Dessin Absent');\n    }\n\n    checkName(name: string): boolean {\n        return REGEX_TITLE.test(name);\n    }\n\n    checkTags(tags: string[]): boolean {\n        let validTagList = true;\n        let tagCtr = 0;\n        tags.forEach((tag) => {\n            if (!REGEX_TAG.test(tag)) {\n                validTagList = false;\n            }\n            tagCtr++;\n        });\n        return validTagList && tagCtr <= MAX_TAGS;\n    }\n\n    checkMetaData(metaData: MetaData): boolean {\n        const containsValidTitle = this.checkName(metaData.name);\n        const containsCorrectTags = this.checkTags(metaData.tags);\n        return containsValidTitle && containsCorrectTags;\n    }\n}\n"]}