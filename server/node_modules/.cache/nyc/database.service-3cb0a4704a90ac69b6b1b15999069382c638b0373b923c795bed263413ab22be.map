{"version":3,"file":"C:/Users/USER/Documents/GitHub/log2990-108/server/app/services/database.service.ts","sources":["C:/Users/USER/Documents/GitHub/log2990-108/server/app/services/database.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { DATABASE_COLLECTION, DATABASE_NAME, DATABASE_URL, MAX_TAGS, REGEX_TAG, REGEX_TITLE, STORAGE_DIR } from '@app/constants';\nimport { MetaData } from '@common/communication/metadata';\nimport * as fs from 'fs';\nimport { injectable } from 'inversify';\nimport { Collection, MongoClient, MongoClientOptions } from 'mongodb';\nimport * as multer from 'multer';\n\n@injectable()\nexport class DatabaseService {\n    client: MongoClient;\n    collection: Collection<MetaData>;\n    multerObject: multer.Multer;\n    localDrawings: string[];\n\n    private options: MongoClientOptions = {\n        useNewUrlParser: true,\n        useUnifiedTopology: true,\n    };\n\n    start(url = DATABASE_URL) {\n        !fs.existsSync(STORAGE_DIR) ? fs.mkdirSync(STORAGE_DIR) : (this.localDrawings = fs.readdirSync(STORAGE_DIR));\n        MongoClient.connect(url, this.options)\n            .then((client: MongoClient) => {\n                this.client = client;\n                this.collection = client.db(DATABASE_NAME).collection(DATABASE_COLLECTION);\n            })\n            .catch((error : Error) => {\n                throw error.message = \"Database connection error\";\n            });\n    }\n\n    createMulterUpload(directory: string): multer.Multer {\n        this.multerObject = multer({ dest: directory });\n        return this.multerObject;\n    }\n\n    async addDrawing(metaData: MetaData): Promise<void> {\n        if (this.checkMetaData(metaData)) {\n            await this.collection.insertOne(metaData);\n        } else {\n            try {\n                fs.unlinkSync(STORAGE_DIR + metaData.filename);\n            } catch (error) {\n                throw new Error('Métadonnées non valides');\n            }\n        }\n    }\n\n    async getMetaData(): Promise<MetaData[]> {\n        return this.collection\n        .find()\n        .toArray()\n        .then((dBData: MetaData[]) => {\n            const dBDataverified: MetaData[] = [];\n            const files: string[] = fs.readdirSync(STORAGE_DIR);\n            for (const data of dBData) {\n                if (files.includes(data.filename)) {\n                    dBDataverified.push(data);\n                }\n            }\n            return dBDataverified;\n        });\n    }\n\n    async deleteDrawing(newFilename: string): Promise<void> {\n        const files: string[] = fs.readdirSync(STORAGE_DIR);\n        if (files.includes(newFilename)) {\n            await this.collection.findOneAndDelete({ filename: newFilename });\n            try {\n                fs.unlinkSync(STORAGE_DIR + newFilename);\n            } catch (error) {\n                throw new Error(\"Problème lors de la suppression de l'image\");\n            }\n        } else throw new Error('Image introuvable');\n    }\n\n    checkName(name: string): boolean {\n        return REGEX_TITLE.test(name);\n    }\n\n    checkTags(tags: string[]): boolean {\n        let validTagList = true;\n        let tagCtr = 0;\n        tags.forEach((tag) => {\n            if (!REGEX_TAG.test(tag)) {\n                validTagList = false;\n            }\n            tagCtr++;\n        });\n        return validTagList && tagCtr <= MAX_TAGS;\n    }\n\n    checkMetaData(metaData: MetaData): boolean {\n        const containsValidTitle = this.checkName(metaData.name);\n        const containsCorrectTags = this.checkTags(metaData.tags);\n        return containsValidTitle && containsCorrectTags;\n    }\n}\n"]}